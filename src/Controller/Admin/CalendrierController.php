<?php
namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;
use Cake\I18n\FrozenTime;


class CalendrierController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['index']);
        $user = $this->Auth->user();
        if($user){
            $user['confirmed_at'] = new FrozenTime($user['confirmed_at']);
            $user['reset_at'] = new FrozenTime($user['reset_at']);
            $this->set('user', $user);
        }else{
            $this->redirect(['controller' => 'Users','action' => 'logout']);
        }

    }

    public function index(){
        $evementsproTable = TableRegistry::get('Evenement_pros');
        $evementsTable = TableRegistry::get('Evenements');
        error_reporting(E_ALL);

        define("GET_DATE_FORMAT", "Y-m-d");
        //$_GET['firstday'] = date('Y-m-d');
        if(isset($_GET['firstday'])){
            try{
                $firstDay = \DateTime::createFromFormat(GET_DATE_FORMAT, $_GET['firstday']);

                $firstDay->modify("first day of this month");
            }catch (\Exception $e){
                $firstDay = new \DateTime("first day of this month");
            }
        }else{
            $firstDay = new \DateTime("first day of this month");
        }

        $formatter_semaine = new \IntlDateFormatter("fr_FR", \IntlDateFormatter::FULL, \IntlDateFormatter::FULL, 'Europe/Paris', \IntlDateFormatter::GREGORIAN, "EEEE");
        $formatter_semaine->setPattern("EEEE");
        $formatter_mois = new \IntlDateFormatter("fr_FR", \IntlDateFormatter::FULL, \IntlDateFormatter::NONE, 'Europe/Paris', \IntlDateFormatter::GREGORIAN, "MMMM");
        $formatter_mois->setPattern("MMMM");

        $prev_month = new \DateTime($firstDay->format('Y-m-d'));


        $lastDay = clone $firstDay;
        $lastDay->modify("last day of this month");
        $next_month = new \DateTime($lastDay->format('Y-m-d'));
        $offset_depart = $firstDay->format('w');
        $offset_fin = 6 - $lastDay->format('w');


        $firstDay->modify("-$offset_depart days");
        $lastDay->modify("+$offset_fin days");
        $dateInitWeek = clone $firstDay;
        $endInitWeek =clone $dateInitWeek;
        $endInitWeek->modify("+7 days");
        $intervalInitWeek = new \DateInterval("P1DT0S");
        $aujourdhui = new \DateTime("today");
        $limit = new \DateTime("today");

        $lastDay->modify("+1 day");
        $intervale_iteration = new \DateInterval("P1DT0S");
        $iterateur = new \DatePeriod($firstDay,$intervale_iteration,$lastDay);

        $limit = $limit->modify("-30 days");
        $next_month = $next_month->modify("+1 days");
        $prev_month = $prev_month->modify("-1 days");


        $this->set(array(
            'dateInitWeek' => $dateInitWeek,
            'intervalInitWeek' => $intervalInitWeek,
            'endInitWeek' => $endInitWeek,
            'formatter_semaine' => $formatter_semaine,
            'formatter_mois' => $formatter_mois,
            'iterateur' => $iterateur,
            'aujourdhui' => $aujourdhui,
            'firstDay' => $firstDay->modify("+$offset_depart days"),
            'limit' => $limit,
            'next_month' => $next_month->format('Y-m-d'),
            'prev_month' => $prev_month->format('Y-m-d'),
        ));

        $evenementspro = $evementsproTable->find()->all();
        $this->set('evenementspro', $evenementspro);
        $evenements = $evementsTable->find()->all();
        $this->set('evenements', $evenements);

        return $this->render('index', 'Admin/default');
    }

    public function add(){
        $evementsTable = TableRegistry::get('Evenements');
        if ($this->request->is(array('post','put'))) {
            $evenement = $evementsTable->newEntity($this->request->getData());
            if ($evementsTable->save($evenement)) {
                $this->Flash->success('Evènement Ajouté avec succès !');
            }else{
                $this->Flash->set('Certains champs ont été mal saisis', ['element' => 'error']);
            }
        }
        return $this->redirect(['contoller' => 'Calendrier', 'action' => 'index']);
    }

    public function delete(){
        $evementsTable = TableRegistry::get('Evenements');
        if(empty($this->request->params['?']['evenement'])){
            $this->Flash->error('Information manquante.');
            $this->redirect(['controller' => 'Users','action' => 'logout']);
        }else{
            if(isset($this->request->params['?']['evenement'])){
                $id = (int)$this->request->params['?']['evenement'];
                $evenement = $evementsTable->find()
                    ->where(
                        [
                            'id' => $id,
                        ]
                    )
                    ->all();
                if (!$evenement->first()) {
                    $this->Flash->error('Cet évènement n\'existe pas.');
                    $this->redirect(['controller' => 'Users', 'action' => 'logout']);
                }else{
                    $evementsTable->delete($evenement->first());
                    $this->Flash->set('Evènement supprimé avec succès.', ['element' => 'success']);
                    $this->redirect(['controller' => 'Calendrier','action' => 'index']);
                }
            }
        }

    }

}